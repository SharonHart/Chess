#ifndef CHESS_COMMON_DEFS_H
#define CHESS_COMMON_DEFS_H

#define BOARD_SIZE 8

typedef enum { CHESS_FALSE, CHESS_TRUE } CHESS_BOOL;

typedef enum
{
	PIECE_TYPE_MIN,
	BLANK_POSITION = PIECE_TYPE_MIN,
	WHITE_PAWN,
	WHITE_BISHOP,
	WHITE_KNIGHT,
	WHITE_ROOK,
	WHITE_QUEEN,
	WHITE_KING,
	BLACK_PAWN,
	BLACK_BISHOP,
	BLACK_KNIGHT,
	BLACK_ROOK,
	BLACK_QUEEN,
	BLACK_KING,
	NUM_OF_PIECE_TYPES,
	PIECE_TYPE_INVALID = 0xFFFFFFF
} CHESS_PIECE_TYPE;

typedef enum
{
	COLORLESS_PIECE_TYPE_MIN,
	NO_PIECE = COLORLESS_PIECE_TYPE_MIN,
	PIECE_TYPE_PAWN,
	PIECE_TYPE_BISHOP,
	PIECE_TYPE_KNIGHT,
	PIECE_TYPE_ROOK,
	PIECE_TYPE_QUEEN,
	PIECE_TYPE_KING,
	NUM_OF_COLORLESS_PIECE_TYPES = PIECE_TYPE_KING,
	COLORLESS_PIECE_TYPE_INVALID = 0xFFFFFFF
} COLORLESS_CHESS_PIECE_TYPE;

/* BOARD[column][row] */
typedef CHESS_PIECE_TYPE BOARD[BOARD_SIZE][BOARD_SIZE];

typedef enum
{
	MOVE_SUCCESSFUL,
	PAWN_PROMOTION_REQUIRED,
	INVALID_BOARD_POSITION,
	INVALID_PIECE,
	ILLEGAL_MOVE,
	ILLEGAL_BOARD_INITIALIZATION,
	CHECK,
	CHECK_MATE,
	GAME_TIE

} MOVE_STATUS;

typedef enum
{
	INTERFACE_MODE_GRAPHICAL,
	INTERFACE_MODE_CONSOLE,
	INTERFACE_MODE_DEFAULT = INTERFACE_MODE_CONSOLE
} INTERFACE_MODE;

typedef enum
{
	GAME_MODE_TWO_PLAYERS = 0,
	GAME_MODE_COMPUTER_AI,
	GAME_MODE_NUM,
	GAME_MODE_DEFAULT = GAME_MODE_TWO_PLAYERS
} GAME_MODE;

/* Relevant only in Computer AI Mode */
typedef enum
{
	GAME_DIFFICULTY_BEST = 0,
	GAME_DIFFICULTY_CONSTANT_1,
	GAME_DIFFICULTY_CONSTANT_2,
	GAME_DIFFICULTY_CONSTANT_3,
	GAME_DIFFICULTY_CONSTANT_4,
	GAME_DIFFICULTY_MIN = GAME_DIFFICULTY_CONSTANT_1,
	GAME_DIFFICULTY_MAX = GAME_DIFFICULTY_CONSTANT_4,
	GAME_DIFFICULTY_NUM,
	GAME_DIFFICULTY_DEFAULT = GAME_DIFFICULTY_CONSTANT_1
} GAME_DIFFICULTY;

typedef enum
{
	PLAYER_COLOR_WHITE,
	PLAYER_COLOR_BLACK,
	PLAYER_COLOR_NUM,
	PLAYER_COLOR_BLANK,
	PLAYER_COLOR_DEFAULT = PLAYER_COLOR_WHITE
} PLAYER_COLOR;

typedef enum
{
	PLAYER_TYPE_HUMAN,
	PLAYER_TYPE_COMPUTER_AI,
	PLAYER_TYPE_NUM
} PLAYER_TYPE;

/* Note: the row & column fields are integers representing array offsets (0 to 7) */
typedef struct {
	int row;
	int column;
} BOARD_LOCATION;

typedef struct move {
	BOARD_LOCATION origin;
	BOARD_LOCATION destination;
	CHESS_PIECE_TYPE newType;
	struct move* pNextMove;
} GAME_MOVE, *GAME_MOVE_PTR;

#endif